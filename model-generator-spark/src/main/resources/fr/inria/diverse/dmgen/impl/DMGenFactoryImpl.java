/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import fr.inria.diverse.dmgen.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DMGenFactoryImpl extends EFactoryImpl implements DMGenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DMGenFactory init()
  {
    try
    {
      DMGenFactory theDMGenFactory = (DMGenFactory)EPackage.Registry.INSTANCE.getEFactory(DMGenPackage.eNS_URI);
      if (theDMGenFactory != null)
      {
        return theDMGenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DMGenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DMGenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DMGenPackage.GEN_CONFIG: return createGenConfig();
      case DMGenPackage.GENERATOR: return createGenerator();
      case DMGenPackage.METAMODEL: return createMetamodel();
      case DMGenPackage.CLAZZ: return createClazz();
      case DMGenPackage.RANGE: return createRange();
      case DMGenPackage.PROPERTY: return createProperty();
      case DMGenPackage.CONDITION: return createCondition();
      case DMGenPackage.RULE: return createRule();
      case DMGenPackage.REG_EX_RULE: return createRegExRule();
      case DMGenPackage.NUMERICAL_RULE: return createNumericalRule();
      case DMGenPackage.SET_RULE: return createSetRule();
      case DMGenPackage.FUNCTION_RULE: return createFunctionRule();
      case DMGenPackage.RANGE_RULE: return createRangeRule();
      case DMGenPackage.URI: return createURI();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GenConfig createGenConfig()
  {
    GenConfigImpl genConfig = new GenConfigImpl();
    return genConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Generator createGenerator()
  {
    GeneratorImpl generator = new GeneratorImpl();
    return generator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metamodel createMetamodel()
  {
    MetamodelImpl metamodel = new MetamodelImpl();
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clazz createClazz()
  {
    ClazzImpl clazz = new ClazzImpl();
    return clazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegExRule createRegExRule()
  {
    RegExRuleImpl regExRule = new RegExRuleImpl();
    return regExRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumericalRule createNumericalRule()
  {
    NumericalRuleImpl numericalRule = new NumericalRuleImpl();
    return numericalRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetRule createSetRule()
  {
    SetRuleImpl setRule = new SetRuleImpl();
    return setRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionRule createFunctionRule()
  {
    FunctionRuleImpl functionRule = new FunctionRuleImpl();
    return functionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RangeRule createRangeRule()
  {
    RangeRuleImpl rangeRule = new RangeRuleImpl();
    return rangeRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URI createURI()
  {
    URIImpl uri = new URIImpl();
    return uri;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DMGenPackage getDMGenPackage()
  {
    return (DMGenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DMGenPackage getPackage()
  {
    return DMGenPackage.eINSTANCE;
  }

} //DMGenFactoryImpl
