/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import fr.inria.diverse.dmgen.DMGenPackage;
import fr.inria.diverse.dmgen.RangeRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Range Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.dmgen.impl.RangeRuleImpl#isIsLowerExclu <em>Is Lower Exclu</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.RangeRuleImpl#getLowerBound <em>Lower Bound</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.RangeRuleImpl#getUpperBound <em>Upper Bound</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.RangeRuleImpl#isIsUpperExclu <em>Is Upper Exclu</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RangeRuleImpl extends NumericalRuleImpl implements RangeRule
{
  /**
   * The default value of the '{@link #isIsLowerExclu() <em>Is Lower Exclu</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsLowerExclu()
   * @generated
   * @ordered
   */
  protected static final boolean IS_LOWER_EXCLU_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsLowerExclu() <em>Is Lower Exclu</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsLowerExclu()
   * @generated
   * @ordered
   */
  protected boolean isLowerExclu = IS_LOWER_EXCLU_EDEFAULT;

  /**
   * The default value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerBound()
   * @generated
   * @ordered
   */
  protected static final String LOWER_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerBound()
   * @generated
   * @ordered
   */
  protected String lowerBound = LOWER_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getUpperBound() <em>Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperBound()
   * @generated
   * @ordered
   */
  protected static final String UPPER_BOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUpperBound() <em>Upper Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperBound()
   * @generated
   * @ordered
   */
  protected String upperBound = UPPER_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #isIsUpperExclu() <em>Is Upper Exclu</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUpperExclu()
   * @generated
   * @ordered
   */
  protected static final boolean IS_UPPER_EXCLU_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsUpperExclu() <em>Is Upper Exclu</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUpperExclu()
   * @generated
   * @ordered
   */
  protected boolean isUpperExclu = IS_UPPER_EXCLU_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RangeRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DMGenPackage.Literals.RANGE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsLowerExclu()
  {
    return isLowerExclu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsLowerExclu(boolean newIsLowerExclu)
  {
    boolean oldIsLowerExclu = isLowerExclu;
    isLowerExclu = newIsLowerExclu;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.RANGE_RULE__IS_LOWER_EXCLU, oldIsLowerExclu, isLowerExclu));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLowerBound()
  {
    return lowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLowerBound(String newLowerBound)
  {
    String oldLowerBound = lowerBound;
    lowerBound = newLowerBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.RANGE_RULE__LOWER_BOUND, oldLowerBound, lowerBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUpperBound()
  {
    return upperBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpperBound(String newUpperBound)
  {
    String oldUpperBound = upperBound;
    upperBound = newUpperBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.RANGE_RULE__UPPER_BOUND, oldUpperBound, upperBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsUpperExclu()
  {
    return isUpperExclu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsUpperExclu(boolean newIsUpperExclu)
  {
    boolean oldIsUpperExclu = isUpperExclu;
    isUpperExclu = newIsUpperExclu;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.RANGE_RULE__IS_UPPER_EXCLU, oldIsUpperExclu, isUpperExclu));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DMGenPackage.RANGE_RULE__IS_LOWER_EXCLU:
        return isIsLowerExclu();
      case DMGenPackage.RANGE_RULE__LOWER_BOUND:
        return getLowerBound();
      case DMGenPackage.RANGE_RULE__UPPER_BOUND:
        return getUpperBound();
      case DMGenPackage.RANGE_RULE__IS_UPPER_EXCLU:
        return isIsUpperExclu();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DMGenPackage.RANGE_RULE__IS_LOWER_EXCLU:
        setIsLowerExclu((Boolean)newValue);
        return;
      case DMGenPackage.RANGE_RULE__LOWER_BOUND:
        setLowerBound((String)newValue);
        return;
      case DMGenPackage.RANGE_RULE__UPPER_BOUND:
        setUpperBound((String)newValue);
        return;
      case DMGenPackage.RANGE_RULE__IS_UPPER_EXCLU:
        setIsUpperExclu((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.RANGE_RULE__IS_LOWER_EXCLU:
        setIsLowerExclu(IS_LOWER_EXCLU_EDEFAULT);
        return;
      case DMGenPackage.RANGE_RULE__LOWER_BOUND:
        setLowerBound(LOWER_BOUND_EDEFAULT);
        return;
      case DMGenPackage.RANGE_RULE__UPPER_BOUND:
        setUpperBound(UPPER_BOUND_EDEFAULT);
        return;
      case DMGenPackage.RANGE_RULE__IS_UPPER_EXCLU:
        setIsUpperExclu(IS_UPPER_EXCLU_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.RANGE_RULE__IS_LOWER_EXCLU:
        return isLowerExclu != IS_LOWER_EXCLU_EDEFAULT;
      case DMGenPackage.RANGE_RULE__LOWER_BOUND:
        return LOWER_BOUND_EDEFAULT == null ? lowerBound != null : !LOWER_BOUND_EDEFAULT.equals(lowerBound);
      case DMGenPackage.RANGE_RULE__UPPER_BOUND:
        return UPPER_BOUND_EDEFAULT == null ? upperBound != null : !UPPER_BOUND_EDEFAULT.equals(upperBound);
      case DMGenPackage.RANGE_RULE__IS_UPPER_EXCLU:
        return isUpperExclu != IS_UPPER_EXCLU_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isLowerExclu: ");
    result.append(isLowerExclu);
    result.append(", lowerBound: ");
    result.append(lowerBound);
    result.append(", upperBound: ");
    result.append(upperBound);
    result.append(", isUpperExclu: ");
    result.append(isUpperExclu);
    result.append(')');
    return result.toString();
  }

} //RangeRuleImpl
