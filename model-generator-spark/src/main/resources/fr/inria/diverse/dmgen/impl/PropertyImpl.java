/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import fr.inria.diverse.dmgen.Condition;
import fr.inria.diverse.dmgen.DMGenPackage;
import fr.inria.diverse.dmgen.Property;
import fr.inria.diverse.dmgen.Range;
import fr.inria.diverse.dmgen.Rule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getRange <em>Range</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getDensity <em>Density</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getVariation <em>Variation</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getRule <em>Rule</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.PropertyImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyImpl extends MinimalEObjectImpl.Container implements Property
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected Range range;

  /**
   * The default value of the '{@link #getDensity() <em>Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDensity()
   * @generated
   * @ordered
   */
  protected static final int DENSITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDensity() <em>Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDensity()
   * @generated
   * @ordered
   */
  protected int density = DENSITY_EDEFAULT;

  /**
   * The default value of the '{@link #getVariation() <em>Variation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariation()
   * @generated
   * @ordered
   */
  protected static final int VARIATION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getVariation() <em>Variation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariation()
   * @generated
   * @ordered
   */
  protected int variation = VARIATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getRule() <em>Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRule()
   * @generated
   * @ordered
   */
  protected Rule rule;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DMGenPackage.Literals.PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRange(Range newRange, NotificationChain msgs)
  {
    Range oldRange = range;
    range = newRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__RANGE, oldRange, newRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRange(Range newRange)
  {
    if (newRange != range)
    {
      NotificationChain msgs = null;
      if (range != null)
        msgs = ((InternalEObject)range).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__RANGE, null, msgs);
      if (newRange != null)
        msgs = ((InternalEObject)newRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__RANGE, null, msgs);
      msgs = basicSetRange(newRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__RANGE, newRange, newRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getDensity()
  {
    return density;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDensity(int newDensity)
  {
    int oldDensity = density;
    density = newDensity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__DENSITY, oldDensity, density));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getVariation()
  {
    return variation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariation(int newVariation)
  {
    int oldVariation = variation;
    variation = newVariation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__VARIATION, oldVariation, variation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rule getRule()
  {
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRule(Rule newRule, NotificationChain msgs)
  {
    Rule oldRule = rule;
    rule = newRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__RULE, oldRule, newRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRule(Rule newRule)
  {
    if (newRule != rule)
    {
      NotificationChain msgs = null;
      if (rule != null)
        msgs = ((InternalEObject)rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__RULE, null, msgs);
      if (newRule != null)
        msgs = ((InternalEObject)newRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__RULE, null, msgs);
      msgs = basicSetRule(newRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__RULE, newRule, newRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.PROPERTY__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.PROPERTY__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DMGenPackage.PROPERTY__RANGE:
        return basicSetRange(null, msgs);
      case DMGenPackage.PROPERTY__RULE:
        return basicSetRule(null, msgs);
      case DMGenPackage.PROPERTY__CONDITION:
        return basicSetCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DMGenPackage.PROPERTY__NAME:
        return getName();
      case DMGenPackage.PROPERTY__RANGE:
        return getRange();
      case DMGenPackage.PROPERTY__DENSITY:
        return getDensity();
      case DMGenPackage.PROPERTY__VARIATION:
        return getVariation();
      case DMGenPackage.PROPERTY__RULE:
        return getRule();
      case DMGenPackage.PROPERTY__CONDITION:
        return getCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DMGenPackage.PROPERTY__NAME:
        setName((String)newValue);
        return;
      case DMGenPackage.PROPERTY__RANGE:
        setRange((Range)newValue);
        return;
      case DMGenPackage.PROPERTY__DENSITY:
        setDensity((Integer)newValue);
        return;
      case DMGenPackage.PROPERTY__VARIATION:
        setVariation((Integer)newValue);
        return;
      case DMGenPackage.PROPERTY__RULE:
        setRule((Rule)newValue);
        return;
      case DMGenPackage.PROPERTY__CONDITION:
        setCondition((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.PROPERTY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DMGenPackage.PROPERTY__RANGE:
        setRange((Range)null);
        return;
      case DMGenPackage.PROPERTY__DENSITY:
        setDensity(DENSITY_EDEFAULT);
        return;
      case DMGenPackage.PROPERTY__VARIATION:
        setVariation(VARIATION_EDEFAULT);
        return;
      case DMGenPackage.PROPERTY__RULE:
        setRule((Rule)null);
        return;
      case DMGenPackage.PROPERTY__CONDITION:
        setCondition((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.PROPERTY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DMGenPackage.PROPERTY__RANGE:
        return range != null;
      case DMGenPackage.PROPERTY__DENSITY:
        return density != DENSITY_EDEFAULT;
      case DMGenPackage.PROPERTY__VARIATION:
        return variation != VARIATION_EDEFAULT;
      case DMGenPackage.PROPERTY__RULE:
        return rule != null;
      case DMGenPackage.PROPERTY__CONDITION:
        return condition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", density: ");
    result.append(density);
    result.append(", variation: ");
    result.append(variation);
    result.append(')');
    return result.toString();
  }

} //PropertyImpl
