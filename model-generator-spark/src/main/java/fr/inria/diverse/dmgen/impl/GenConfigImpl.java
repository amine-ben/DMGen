/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import fr.inria.diverse.dmgen.DMGenPackage;
import fr.inria.diverse.dmgen.GenConfig;
import fr.inria.diverse.dmgen.Generator;
import fr.inria.diverse.dmgen.Metamodel;
import fr.inria.diverse.dmgen.URI;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.dmgen.impl.GenConfigImpl#getMetamodel <em>Metamodel</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.GenConfigImpl#getPackage <em>Package</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.GenConfigImpl#getHdfsMaster <em>Hdfs Master</em>}</li>
 *   <li>{@link fr.inria.diverse.dmgen.impl.GenConfigImpl#getGenerators <em>Generators</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GenConfigImpl extends MinimalEObjectImpl.Container implements GenConfig
{
  /**
   * The cached value of the '{@link #getMetamodel() <em>Metamodel</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetamodel()
   * @generated
   * @ordered
   */
  protected Metamodel metamodel;

  /**
   * The default value of the '{@link #getPackage() <em>Package</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackage()
   * @generated
   * @ordered
   */
  protected static final String PACKAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPackage() <em>Package</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackage()
   * @generated
   * @ordered
   */
  protected String package_ = PACKAGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getHdfsMaster() <em>Hdfs Master</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHdfsMaster()
   * @generated
   * @ordered
   */
  protected URI hdfsMaster;

  /**
   * The cached value of the '{@link #getGenerators() <em>Generators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenerators()
   * @generated
   * @ordered
   */
  protected EList<Generator> generators;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DMGenPackage.Literals.GEN_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metamodel getMetamodel()
  {
    return metamodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetamodel(Metamodel newMetamodel, NotificationChain msgs)
  {
    Metamodel oldMetamodel = metamodel;
    metamodel = newMetamodel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DMGenPackage.GEN_CONFIG__METAMODEL, oldMetamodel, newMetamodel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetamodel(Metamodel newMetamodel)
  {
    if (newMetamodel != metamodel)
    {
      NotificationChain msgs = null;
      if (metamodel != null)
        msgs = ((InternalEObject)metamodel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.GEN_CONFIG__METAMODEL, null, msgs);
      if (newMetamodel != null)
        msgs = ((InternalEObject)newMetamodel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.GEN_CONFIG__METAMODEL, null, msgs);
      msgs = basicSetMetamodel(newMetamodel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.GEN_CONFIG__METAMODEL, newMetamodel, newMetamodel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPackage()
  {
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPackage(String newPackage)
  {
    String oldPackage = package_;
    package_ = newPackage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.GEN_CONFIG__PACKAGE, oldPackage, package_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URI getHdfsMaster()
  {
    return hdfsMaster;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHdfsMaster(URI newHdfsMaster, NotificationChain msgs)
  {
    URI oldHdfsMaster = hdfsMaster;
    hdfsMaster = newHdfsMaster;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DMGenPackage.GEN_CONFIG__HDFS_MASTER, oldHdfsMaster, newHdfsMaster);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHdfsMaster(URI newHdfsMaster)
  {
    if (newHdfsMaster != hdfsMaster)
    {
      NotificationChain msgs = null;
      if (hdfsMaster != null)
        msgs = ((InternalEObject)hdfsMaster).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.GEN_CONFIG__HDFS_MASTER, null, msgs);
      if (newHdfsMaster != null)
        msgs = ((InternalEObject)newHdfsMaster).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DMGenPackage.GEN_CONFIG__HDFS_MASTER, null, msgs);
      msgs = basicSetHdfsMaster(newHdfsMaster, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DMGenPackage.GEN_CONFIG__HDFS_MASTER, newHdfsMaster, newHdfsMaster));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Generator> getGenerators()
  {
    if (generators == null)
    {
      generators = new EObjectContainmentEList<Generator>(Generator.class, this, DMGenPackage.GEN_CONFIG__GENERATORS);
    }
    return generators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DMGenPackage.GEN_CONFIG__METAMODEL:
        return basicSetMetamodel(null, msgs);
      case DMGenPackage.GEN_CONFIG__HDFS_MASTER:
        return basicSetHdfsMaster(null, msgs);
      case DMGenPackage.GEN_CONFIG__GENERATORS:
        return ((InternalEList<?>)getGenerators()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DMGenPackage.GEN_CONFIG__METAMODEL:
        return getMetamodel();
      case DMGenPackage.GEN_CONFIG__PACKAGE:
        return getPackage();
      case DMGenPackage.GEN_CONFIG__HDFS_MASTER:
        return getHdfsMaster();
      case DMGenPackage.GEN_CONFIG__GENERATORS:
        return getGenerators();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DMGenPackage.GEN_CONFIG__METAMODEL:
        setMetamodel((Metamodel)newValue);
        return;
      case DMGenPackage.GEN_CONFIG__PACKAGE:
        setPackage((String)newValue);
        return;
      case DMGenPackage.GEN_CONFIG__HDFS_MASTER:
        setHdfsMaster((URI)newValue);
        return;
      case DMGenPackage.GEN_CONFIG__GENERATORS:
        getGenerators().clear();
        getGenerators().addAll((Collection<? extends Generator>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.GEN_CONFIG__METAMODEL:
        setMetamodel((Metamodel)null);
        return;
      case DMGenPackage.GEN_CONFIG__PACKAGE:
        setPackage(PACKAGE_EDEFAULT);
        return;
      case DMGenPackage.GEN_CONFIG__HDFS_MASTER:
        setHdfsMaster((URI)null);
        return;
      case DMGenPackage.GEN_CONFIG__GENERATORS:
        getGenerators().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DMGenPackage.GEN_CONFIG__METAMODEL:
        return metamodel != null;
      case DMGenPackage.GEN_CONFIG__PACKAGE:
        return PACKAGE_EDEFAULT == null ? package_ != null : !PACKAGE_EDEFAULT.equals(package_);
      case DMGenPackage.GEN_CONFIG__HDFS_MASTER:
        return hdfsMaster != null;
      case DMGenPackage.GEN_CONFIG__GENERATORS:
        return generators != null && !generators.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (package: ");
    result.append(package_);
    result.append(')');
    return result.toString();
  }

} //GenConfigImpl
