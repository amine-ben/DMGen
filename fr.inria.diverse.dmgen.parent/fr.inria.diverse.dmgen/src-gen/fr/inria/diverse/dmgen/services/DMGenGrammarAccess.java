/*
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DMGenGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GenConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.GenConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetamodelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelMetamodelParserRuleCall_1_0 = (RuleCall)cMetamodelAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cPackageKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPackageAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPackagePACKAGEParserRuleCall_2_0_1_0 = (RuleCall)cPackageAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cFsMasterKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cHdfsMasterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cHdfsMasterURIParserRuleCall_2_1_1_0 = (RuleCall)cHdfsMasterAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cDeployModeKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDeployModeAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cDeployModeAlternatives_2_2_1_0 = (Alternatives)cDeployModeAssignment_2_2_1.eContents().get(0);
		private final Keyword cDeployModeClusterKeyword_2_2_1_0_0 = (Keyword)cDeployModeAlternatives_2_2_1_0.eContents().get(0);
		private final Keyword cDeployModeLocalKeyword_2_2_1_0_1 = (Keyword)cDeployModeAlternatives_2_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cNumberOfNodesAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cNumberOfNodesINTorUNBOUNDEDParserRuleCall_2_2_3_0 = (RuleCall)cNumberOfNodesAssignment_2_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cHbaseMasterKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cHbaseMasterAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cHbaseMasterURIParserRuleCall_2_3_1_0 = (RuleCall)cHbaseMasterAssignment_2_3_1.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_3_0 = (RuleCall)cGeneratorsAssignment_3.eContents().get(0);
		private final Assignment cGeneratorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeneratorsGeneratorParserRuleCall_4_0 = (RuleCall)cGeneratorsAssignment_4.eContents().get(0);
		
		//GenConfig:
		//	'import' metamodel=Metamodel (('package' package=PACKAGE)? & ('fs-master' hdfsMaster=URI)? & ('deploy-mode'
		//	deployMode=('cluster' | 'local') '[' numberOfNodes=INTorUNBOUNDED ']')? & ('hbase-master' hbaseMaster=URI)?)
		//	generators+=Generator generators+=Generator*;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' metamodel=Metamodel (('package' package=PACKAGE)? & ('fs-master' hdfsMaster=URI)? & ('deploy-mode'
		//deployMode=('cluster' | 'local') '[' numberOfNodes=INTorUNBOUNDED ']')? & ('hbase-master' hbaseMaster=URI)?)
		//generators+=Generator generators+=Generator*
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//metamodel=Metamodel
		public Assignment getMetamodelAssignment_1() { return cMetamodelAssignment_1; }
		
		//Metamodel
		public RuleCall getMetamodelMetamodelParserRuleCall_1_0() { return cMetamodelMetamodelParserRuleCall_1_0; }
		
		//(('package' package=PACKAGE)? & ('fs-master' hdfsMaster=URI)? & ('deploy-mode' deployMode=('cluster' | 'local') '['
		//numberOfNodes=INTorUNBOUNDED ']')? & ('hbase-master' hbaseMaster=URI)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('package' package=PACKAGE)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'package'
		public Keyword getPackageKeyword_2_0_0() { return cPackageKeyword_2_0_0; }
		
		//package=PACKAGE
		public Assignment getPackageAssignment_2_0_1() { return cPackageAssignment_2_0_1; }
		
		//PACKAGE
		public RuleCall getPackagePACKAGEParserRuleCall_2_0_1_0() { return cPackagePACKAGEParserRuleCall_2_0_1_0; }
		
		//('fs-master' hdfsMaster=URI)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'fs-master'
		public Keyword getFsMasterKeyword_2_1_0() { return cFsMasterKeyword_2_1_0; }
		
		//hdfsMaster=URI
		public Assignment getHdfsMasterAssignment_2_1_1() { return cHdfsMasterAssignment_2_1_1; }
		
		//URI
		public RuleCall getHdfsMasterURIParserRuleCall_2_1_1_0() { return cHdfsMasterURIParserRuleCall_2_1_1_0; }
		
		//('deploy-mode' deployMode=('cluster' | 'local') '[' numberOfNodes=INTorUNBOUNDED ']')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'deploy-mode'
		public Keyword getDeployModeKeyword_2_2_0() { return cDeployModeKeyword_2_2_0; }
		
		//deployMode=('cluster' | 'local')
		public Assignment getDeployModeAssignment_2_2_1() { return cDeployModeAssignment_2_2_1; }
		
		//('cluster' | 'local')
		public Alternatives getDeployModeAlternatives_2_2_1_0() { return cDeployModeAlternatives_2_2_1_0; }
		
		//'cluster'
		public Keyword getDeployModeClusterKeyword_2_2_1_0_0() { return cDeployModeClusterKeyword_2_2_1_0_0; }
		
		//'local'
		public Keyword getDeployModeLocalKeyword_2_2_1_0_1() { return cDeployModeLocalKeyword_2_2_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2_2() { return cLeftSquareBracketKeyword_2_2_2; }
		
		//numberOfNodes=INTorUNBOUNDED
		public Assignment getNumberOfNodesAssignment_2_2_3() { return cNumberOfNodesAssignment_2_2_3; }
		
		//INTorUNBOUNDED
		public RuleCall getNumberOfNodesINTorUNBOUNDEDParserRuleCall_2_2_3_0() { return cNumberOfNodesINTorUNBOUNDEDParserRuleCall_2_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2_4() { return cRightSquareBracketKeyword_2_2_4; }
		
		//('hbase-master' hbaseMaster=URI)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'hbase-master'
		public Keyword getHbaseMasterKeyword_2_3_0() { return cHbaseMasterKeyword_2_3_0; }
		
		//hbaseMaster=URI
		public Assignment getHbaseMasterAssignment_2_3_1() { return cHbaseMasterAssignment_2_3_1; }
		
		//URI
		public RuleCall getHbaseMasterURIParserRuleCall_2_3_1_0() { return cHbaseMasterURIParserRuleCall_2_3_1_0; }
		
		//generators+=Generator
		public Assignment getGeneratorsAssignment_3() { return cGeneratorsAssignment_3; }
		
		//Generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_3_0() { return cGeneratorsGeneratorParserRuleCall_3_0; }
		
		//generators+=Generator*
		public Assignment getGeneratorsAssignment_4() { return cGeneratorsAssignment_4; }
		
		//Generator
		public RuleCall getGeneratorsGeneratorParserRuleCall_4_0() { return cGeneratorsGeneratorParserRuleCall_4_0; }
	}
	public class INTorUNBOUNDEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.INTorUNBOUNDED");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//INTorUNBOUNDED:
		//	'*' | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class PACKAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.PACKAGE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PACKAGE:
		//	ID (('.' | '_') ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (('.' | '_') ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(('.' | '_') ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '_')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'_'
		public Keyword get_Keyword_1_0_1() { return c_Keyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL ecore::EFloat:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGenerateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cSizeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_3_0_1_0 = (RuleCall)cSizeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPrefixKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cPrefixAssignment_3_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cDensityKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cGlobalDensityAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cGlobalDensityINTTerminalRuleCall_5_0_1_0 = (RuleCall)cGlobalDensityAssignment_5_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cDeviationKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cGlobalDeviationAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cGlobalDeviationDECIMALParserRuleCall_5_1_1_0 = (RuleCall)cGlobalDeviationAssignment_5_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cClassesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesClazzParserRuleCall_6_0 = (RuleCall)cClassesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cClassesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cClassesClazzParserRuleCall_7_1_0 = (RuleCall)cClassesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Generator:
		//	name='generate' number=INT 'with' ('size' size=INT & ('prefix' prefix=STRING)?)
		//	'{' (('density' globalDensity=INT ';')? & ('deviation' globalDeviation=DECIMAL ';')?) classes+=Clazz? (';'
		//	classes+=Clazz)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='generate' number=INT 'with' ('size' size=INT & ('prefix' prefix=STRING)?) '{' (('density' globalDensity=INT ';')?
		//& ('deviation' globalDeviation=DECIMAL ';')?) classes+=Clazz? (';' classes+=Clazz)* '}'
		public Group getGroup() { return cGroup; }
		
		//name='generate'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'generate'
		public Keyword getNameGenerateKeyword_0_0() { return cNameGenerateKeyword_0_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//('size' size=INT & ('prefix' prefix=STRING)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'size' size=INT
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'size'
		public Keyword getSizeKeyword_3_0_0() { return cSizeKeyword_3_0_0; }
		
		//size=INT
		public Assignment getSizeAssignment_3_0_1() { return cSizeAssignment_3_0_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0_1_0() { return cSizeINTTerminalRuleCall_3_0_1_0; }
		
		//('prefix' prefix=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'prefix'
		public Keyword getPrefixKeyword_3_1_0() { return cPrefixKeyword_3_1_0; }
		
		//prefix=STRING
		public Assignment getPrefixAssignment_3_1_1() { return cPrefixAssignment_3_1_1; }
		
		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_3_1_1_0() { return cPrefixSTRINGTerminalRuleCall_3_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(('density' globalDensity=INT ';')? & ('deviation' globalDeviation=DECIMAL ';')?)
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }
		
		//('density' globalDensity=INT ';')?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'density'
		public Keyword getDensityKeyword_5_0_0() { return cDensityKeyword_5_0_0; }
		
		//globalDensity=INT
		public Assignment getGlobalDensityAssignment_5_0_1() { return cGlobalDensityAssignment_5_0_1; }
		
		//INT
		public RuleCall getGlobalDensityINTTerminalRuleCall_5_0_1_0() { return cGlobalDensityINTTerminalRuleCall_5_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0_2() { return cSemicolonKeyword_5_0_2; }
		
		//('deviation' globalDeviation=DECIMAL ';')?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'deviation'
		public Keyword getDeviationKeyword_5_1_0() { return cDeviationKeyword_5_1_0; }
		
		//globalDeviation=DECIMAL
		public Assignment getGlobalDeviationAssignment_5_1_1() { return cGlobalDeviationAssignment_5_1_1; }
		
		//DECIMAL
		public RuleCall getGlobalDeviationDECIMALParserRuleCall_5_1_1_0() { return cGlobalDeviationDECIMALParserRuleCall_5_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1_2() { return cSemicolonKeyword_5_1_2; }
		
		//classes+=Clazz?
		public Assignment getClassesAssignment_6() { return cClassesAssignment_6; }
		
		//Clazz
		public RuleCall getClassesClazzParserRuleCall_6_0() { return cClassesClazzParserRuleCall_6_0; }
		
		//(';' classes+=Clazz)*
		public Group getGroup_7() { return cGroup_7; }
		
		//';'
		public Keyword getSemicolonKeyword_7_0() { return cSemicolonKeyword_7_0; }
		
		//classes+=Clazz
		public Assignment getClassesAssignment_7_1() { return cClassesAssignment_7_1; }
		
		//Clazz
		public RuleCall getClassesClazzParserRuleCall_7_1_0() { return cClassesClazzParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.Metamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUriURIParserRuleCall_1_0 = (RuleCall)cUriAssignment_1.eContents().get(0);
		
		//Metamodel:
		//	name=ID uri=URI;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID uri=URI
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//uri=URI
		public Assignment getUriAssignment_1() { return cUriAssignment_1; }
		
		//URI
		public RuleCall getUriURIParserRuleCall_1_0() { return cUriURIParserRuleCall_1_0; }
	}
	public class ClazzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.Clazz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDepthKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDepthAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDepthINTTerminalRuleCall_2_1_0 = (RuleCall)cDepthAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_2_1_0 = (RuleCall)cPropertiesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Clazz:
		//	name=ID range=Range? ('depth' depth=INT)? ('{'
		//	properties+=Property (';' properties+=Property)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID range=Range? ('depth' depth=INT)? ('{' properties+=Property (';' properties+=Property)* '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//range=Range?
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_1_0() { return cRangeRangeParserRuleCall_1_0; }
		
		//('depth' depth=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'depth'
		public Keyword getDepthKeyword_2_0() { return cDepthKeyword_2_0; }
		
		//depth=INT
		public Assignment getDepthAssignment_2_1() { return cDepthAssignment_2_1; }
		
		//INT
		public RuleCall getDepthINTTerminalRuleCall_2_1_0() { return cDepthINTTerminalRuleCall_2_1_0; }
		
		//('{' properties+=Property (';' properties+=Property)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0() { return cPropertiesPropertyParserRuleCall_3_1_0; }
		
		//(';' properties+=Property)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_3_2_1() { return cPropertiesAssignment_3_2_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_2_1_0() { return cPropertiesPropertyParserRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerINTTerminalRuleCall_1_0 = (RuleCall)cLowerAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperINTTerminalRuleCall_3_0 = (RuleCall)cUpperAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Range:
		//	'[' lower=INT '..' upper=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' lower=INT '..' upper=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//lower=INT
		public Assignment getLowerAssignment_1() { return cLowerAssignment_1; }
		
		//INT
		public RuleCall getLowerINTTerminalRuleCall_1_0() { return cLowerINTTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//upper=INT
		public Assignment getUpperAssignment_3() { return cUpperAssignment_3; }
		
		//INT
		public RuleCall getUpperINTTerminalRuleCall_3_0() { return cUpperINTTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cRangeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cRangeRangeParserRuleCall_1_0_0_0 = (RuleCall)cRangeAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cDensityKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cDensityAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cDensityINTTerminalRuleCall_1_0_1_1_0 = (RuleCall)cDensityAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cVariationKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVariationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariationINTTerminalRuleCall_1_1_1_0 = (RuleCall)cVariationAssignment_1_1_1.eContents().get(0);
		
		//Property:
		//	name=ID (range=Range ('density' density=INT)? & ('variation' variation=INT)?);
		@Override public ParserRule getRule() { return rule; }
		
		////name=ID (('density' density=INT)? & ('variation' variation=INT)?)
		//name=ID (range=Range ('density' density=INT)? & ('variation' variation=INT)?)
		public Group getGroup() { return cGroup; }
		
		////name=ID (('density' density=INT)? & ('variation' variation=INT)?)
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(range=Range ('density' density=INT)? & ('variation' variation=INT)?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//range=Range ('density' density=INT)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//range=Range
		public Assignment getRangeAssignment_1_0_0() { return cRangeAssignment_1_0_0; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_1_0_0_0() { return cRangeRangeParserRuleCall_1_0_0_0; }
		
		//('density' density=INT)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'density'
		public Keyword getDensityKeyword_1_0_1_0() { return cDensityKeyword_1_0_1_0; }
		
		//density=INT
		public Assignment getDensityAssignment_1_0_1_1() { return cDensityAssignment_1_0_1_1; }
		
		//INT
		public RuleCall getDensityINTTerminalRuleCall_1_0_1_1_0() { return cDensityINTTerminalRuleCall_1_0_1_1_0; }
		
		//('variation' variation=INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'variation'
		public Keyword getVariationKeyword_1_1_0() { return cVariationKeyword_1_1_0; }
		
		//variation=INT
		public Assignment getVariationAssignment_1_1_1() { return cVariationAssignment_1_1_1; }
		
		//INT
		public RuleCall getVariationINTTerminalRuleCall_1_1_1_0() { return cVariationINTTerminalRuleCall_1_1_1_0; }
	}
	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.URI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSchemeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSchemeSCHEMETerminalRuleCall_0_0 = (RuleCall)cSchemeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAuthorityAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAuthorityFRAGMENTParserRuleCall_1_0_0 = (RuleCall)cAuthorityAssignment_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFragmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFragmentsFRAGMENTParserRuleCall_2_0 = (RuleCall)cFragmentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFragmentsFRAGMENTParserRuleCall_3_1_0 = (RuleCall)cFragmentsAssignment_3_1.eContents().get(0);
		
		//URI:
		//	scheme=SCHEME? (authority=FRAGMENT '/')? // 
		//	fragments+=FRAGMENT ('/' fragments+=FRAGMENT)* // 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//scheme=SCHEME? (authority=FRAGMENT '/')? // 
		//fragments+=FRAGMENT ('/' fragments+=FRAGMENT)*
		public Group getGroup() { return cGroup; }
		
		//scheme=SCHEME?
		public Assignment getSchemeAssignment_0() { return cSchemeAssignment_0; }
		
		//SCHEME
		public RuleCall getSchemeSCHEMETerminalRuleCall_0_0() { return cSchemeSCHEMETerminalRuleCall_0_0; }
		
		//(authority=FRAGMENT '/')?
		public Group getGroup_1() { return cGroup_1; }
		
		//authority=FRAGMENT
		public Assignment getAuthorityAssignment_1_0() { return cAuthorityAssignment_1_0; }
		
		//FRAGMENT
		public RuleCall getAuthorityFRAGMENTParserRuleCall_1_0_0() { return cAuthorityFRAGMENTParserRuleCall_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//// 
		//fragments+=FRAGMENT
		public Assignment getFragmentsAssignment_2() { return cFragmentsAssignment_2; }
		
		//FRAGMENT
		public RuleCall getFragmentsFRAGMENTParserRuleCall_2_0() { return cFragmentsFRAGMENTParserRuleCall_2_0; }
		
		//('/' fragments+=FRAGMENT)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'/'
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }
		
		//fragments+=FRAGMENT
		public Assignment getFragmentsAssignment_3_1() { return cFragmentsAssignment_3_1; }
		
		//FRAGMENT
		public RuleCall getFragmentsFRAGMENTParserRuleCall_3_1_0() { return cFragmentsFRAGMENTParserRuleCall_3_1_0; }
	}
	public class FRAGMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.FRAGMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// FIXME adding support for port number 
		//FRAGMENT:
		//	ID (('.' | '-') ID)* (':' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (('.' | '-') ID)* (':' INT)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(('.' | '-') ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//(':' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	
	
	private final GenConfigElements pGenConfig;
	private final INTorUNBOUNDEDElements pINTorUNBOUNDED;
	private final PACKAGEElements pPACKAGE;
	private final DECIMALElements pDECIMAL;
	private final GeneratorElements pGenerator;
	private final MetamodelElements pMetamodel;
	private final ClazzElements pClazz;
	private final RangeElements pRange;
	private final PropertyElements pProperty;
	private final URIElements pURI;
	private final FRAGMENTElements pFRAGMENT;
	private final TerminalRule tSCHEME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DMGenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGenConfig = new GenConfigElements();
		this.pINTorUNBOUNDED = new INTorUNBOUNDEDElements();
		this.pPACKAGE = new PACKAGEElements();
		this.pDECIMAL = new DECIMALElements();
		this.pGenerator = new GeneratorElements();
		this.pMetamodel = new MetamodelElements();
		this.pClazz = new ClazzElements();
		this.pRange = new RangeElements();
		this.pProperty = new PropertyElements();
		this.pURI = new URIElements();
		this.pFRAGMENT = new FRAGMENTElements();
		this.tSCHEME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.dmgen.DMGen.SCHEME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.dmgen.DMGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GenConfig:
	//	'import' metamodel=Metamodel (('package' package=PACKAGE)? & ('fs-master' hdfsMaster=URI)? & ('deploy-mode'
	//	deployMode=('cluster' | 'local') '[' numberOfNodes=INTorUNBOUNDED ']')? & ('hbase-master' hbaseMaster=URI)?)
	//	generators+=Generator generators+=Generator*;
	public GenConfigElements getGenConfigAccess() {
		return pGenConfig;
	}
	
	public ParserRule getGenConfigRule() {
		return getGenConfigAccess().getRule();
	}
	
	//INTorUNBOUNDED:
	//	'*' | INT;
	public INTorUNBOUNDEDElements getINTorUNBOUNDEDAccess() {
		return pINTorUNBOUNDED;
	}
	
	public ParserRule getINTorUNBOUNDEDRule() {
		return getINTorUNBOUNDEDAccess().getRule();
	}
	
	//PACKAGE:
	//	ID (('.' | '_') ID)*;
	public PACKAGEElements getPACKAGEAccess() {
		return pPACKAGE;
	}
	
	public ParserRule getPACKAGERule() {
		return getPACKAGEAccess().getRule();
	}
	
	//DECIMAL ecore::EFloat:
	//	INT '.' INT
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//Generator:
	//	name='generate' number=INT 'with' ('size' size=INT & ('prefix' prefix=STRING)?)
	//	'{' (('density' globalDensity=INT ';')? & ('deviation' globalDeviation=DECIMAL ';')?) classes+=Clazz? (';'
	//	classes+=Clazz)*
	//	'}';
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}
	
	//Metamodel:
	//	name=ID uri=URI;
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}
	
	//Clazz:
	//	name=ID range=Range? ('depth' depth=INT)? ('{'
	//	properties+=Property (';' properties+=Property)*
	//	'}')?;
	public ClazzElements getClazzAccess() {
		return pClazz;
	}
	
	public ParserRule getClazzRule() {
		return getClazzAccess().getRule();
	}
	
	//Range:
	//	'[' lower=INT '..' upper=INT ']';
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Property:
	//	name=ID (range=Range ('density' density=INT)? & ('variation' variation=INT)?);
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//URI:
	//	scheme=SCHEME? (authority=FRAGMENT '/')? // 
	//	fragments+=FRAGMENT ('/' fragments+=FRAGMENT)* // 
	//;
	public URIElements getURIAccess() {
		return pURI;
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}
	
	//// FIXME adding support for port number 
	//FRAGMENT:
	//	ID (('.' | '-') ID)* (':' INT)?;
	public FRAGMENTElements getFRAGMENTAccess() {
		return pFRAGMENT;
	}
	
	public ParserRule getFRAGMENTRule() {
		return getFRAGMENTAccess().getRule();
	}
	
	//terminal SCHEME:
	//	'http://' | 'file:///' | 'platform:/' | 'neoemfhbase://' | 'hdfs://';
	public TerminalRule getSCHEMERule() {
		return tSCHEME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
