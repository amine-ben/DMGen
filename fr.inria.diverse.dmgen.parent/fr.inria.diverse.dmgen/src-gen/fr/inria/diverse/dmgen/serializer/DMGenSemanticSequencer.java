/*
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.serializer;

import com.google.inject.Inject;
import fr.inria.diverse.dmgen.dMGen.Bundle;
import fr.inria.diverse.dmgen.dMGen.Clazz;
import fr.inria.diverse.dmgen.dMGen.DMGenPackage;
import fr.inria.diverse.dmgen.dMGen.GenConfig;
import fr.inria.diverse.dmgen.dMGen.Generator;
import fr.inria.diverse.dmgen.dMGen.Metamodel;
import fr.inria.diverse.dmgen.dMGen.Property;
import fr.inria.diverse.dmgen.dMGen.URI;
import fr.inria.diverse.dmgen.services.DMGenGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DMGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DMGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DMGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DMGenPackage.BUNDLE:
				sequence_Bundle(context, (Bundle) semanticObject); 
				return; 
			case DMGenPackage.CLAZZ:
				sequence_Clazz(context, (Clazz) semanticObject); 
				return; 
			case DMGenPackage.GEN_CONFIG:
				sequence_GenConfig(context, (GenConfig) semanticObject); 
				return; 
			case DMGenPackage.GENERATOR:
				sequence_Generator(context, (Generator) semanticObject); 
				return; 
			case DMGenPackage.METAMODEL:
				sequence_Metamodel(context, (Metamodel) semanticObject); 
				return; 
			case DMGenPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case DMGenPackage.URI:
				sequence_URI(context, (URI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Bundle returns Bundle
	 *
	 * Constraint:
	 *     (size=INT times=INT)
	 */
	protected void sequence_Bundle(ISerializationContext context, Bundle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DMGenPackage.Literals.BUNDLE__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DMGenPackage.Literals.BUNDLE__SIZE));
			if (transientValues.isValueTransient(semanticObject, DMGenPackage.Literals.BUNDLE__TIMES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DMGenPackage.Literals.BUNDLE__TIMES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBundleAccess().getSizeINTTerminalRuleCall_0_0(), semanticObject.getSize());
		feeder.accept(grammarAccess.getBundleAccess().getTimesINTTerminalRuleCall_2_0(), semanticObject.getTimes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Clazz returns Clazz
	 *
	 * Constraint:
	 *     (name=ID instances=INT? (properties+=Property properties+=Property*)?)
	 */
	protected void sequence_Clazz(ISerializationContext context, Clazz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenConfig returns GenConfig
	 *
	 * Constraint:
	 *     (metamodel=Metamodel (globalDensity=INT | globalVariation=DECIMAL)* generators+=Generator generators+=Generator*)
	 */
	protected void sequence_GenConfig(ISerializationContext context, GenConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generator returns Generator
	 *
	 * Constraint:
	 *     (name='generate' number=INT (size=INT | prefix=STRING)* classes+=Clazz? classes+=Clazz*)
	 */
	protected void sequence_Generator(ISerializationContext context, Generator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metamodel returns Metamodel
	 *
	 * Constraint:
	 *     (name=ID uri=URI)
	 */
	protected void sequence_Metamodel(ISerializationContext context, Metamodel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DMGenPackage.Literals.METAMODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DMGenPackage.Literals.METAMODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, DMGenPackage.Literals.METAMODEL__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DMGenPackage.Literals.METAMODEL__URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetamodelAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMetamodelAccess().getUriURIParserRuleCall_1_0(), semanticObject.getUri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID (density=INT | variation=INT)*)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URI returns URI
	 *
	 * Constraint:
	 *     (scheme=SCHEME authority=FRAGMENT? fragments+=FRAGMENT fragments+=FRAGMENT*)
	 */
	protected void sequence_URI(ISerializationContext context, URI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
