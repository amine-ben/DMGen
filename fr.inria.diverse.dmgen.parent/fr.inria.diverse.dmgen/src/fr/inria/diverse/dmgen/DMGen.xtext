grammar fr.inria.diverse.dmgen.DMGen with org.eclipse.xtext.common.Terminals

generate dMGen "http://www.inria.fr/diverse/dmgen/DMGen"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GenConfig returns GenConfig:
	'import' metamodel=Metamodel 
	((('package' package=PACKAGE)?) & 
			(('fs-master' hdfsMaster=URI)?) &
			((('deploy-mode') deployMode=('cluster' | 'local') '[' numberOfNodes = INTorUNBOUNDED']')?) &
			('hbase-master' hbaseMaster = URI)?	
	) 
	 generators+=Generator (generators+=Generator)*
	;


Generator returns Generator :
	name='generate' number=INT 'with'  (('size' size=INT) & ('prefix' prefix=STRING)? & ('base' basePath=PATH)?) 
		'{'
		 (( 'density' globalDensity= INT ';')?  & 
			( 'deviation' globalDeviation= DECIMAL ';')? )
			(classes+=Clazz)? ( ';' classes+=Clazz)*		
		'}'
		;

PATH:
	('./')? ('/'ID)*
;

Metamodel returns Metamodel :
	name=ID uri=URI
;

Clazz returns Clazz:
	name=ID (range = Range)? ('depth' depth=INT)? ( '{'
		properties+=Property (';' properties+=Property)*
		'}')?
;

Range returns Range:
	'[' lower=INT '..' upper=INT ']'
;

Property returns Property:
	name=ID ( ':'(range=Range ('density' density=INT)? & ('variation' variation=INT)?)? ('in' rule=Rule ('where' condition=Condition)?)?)?	
;

Condition returns Condition :
	value='condition' 'holds'
;

Rule returns Rule:
	NumericalRule 
	| RegExRule
;

RegExRule returns RegExRule:
	expression=STRING
;

NumericalRule returns NumericalRule:
	RangeRule
	| FunctionRule
	| SetRule
;

SetRule returns SetRule:
	'{' elements+=Element (';'elements+=Element)+ '}'
;

Element :
	INT | DECIMAL |STRING;

//FIXME 
FunctionRule returns FunctionRule:
	value = 'function'
;

RangeRule returns RangeRule:
	isLowerExclu?=(']')? '['? lowerBound = INT_OR_DECIMAL'..' upperBound=INT_OR_DECIMAL isUpperExclu?='['? (']')?
;

INT_OR_DECIMAL:
	INT
	| DECIMAL
;

URI returns URI:
	(scheme=SCHEME)? // Scheme
	(authority=FRAGMENT'/')? // 
	fragments+=FRAGMENT ('/' fragments+=FRAGMENT)*	// 
;

INTorUNBOUNDED returns ecore::EString :
	'*' | INT
;

PACKAGE returns ecore::EString :
	ID(('.' |'_') ID)*
;

DECIMAL returns ecore::EFloat :
	INT'.'INT
;

FRAGMENT returns ecore::EString :
	ID(('.' |'-') ID)*(':'INT)?
;

terminal SCHEME:
	'http://'|'file:///'|'platform:/'|'neoemfhbase://'|'hdfs://'
;