/*
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.ide.contentassist.antlr;

import com.google.inject.Inject;
import fr.inria.diverse.dmgen.ide.contentassist.antlr.internal.InternalDMGenParser;
import fr.inria.diverse.dmgen.services.DMGenGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DMGenParser extends AbstractContentAssistParser {

	@Inject
	private DMGenGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDMGenParser createParser() {
		InternalDMGenParser result = new InternalDMGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFRAGMENTAccess().getAlternatives_1_0(), "rule__FRAGMENT__Alternatives_1_0");
					put(grammarAccess.getGenConfigAccess().getGroup(), "rule__GenConfig__Group__0");
					put(grammarAccess.getGenConfigAccess().getGroup_3_0(), "rule__GenConfig__Group_3_0__0");
					put(grammarAccess.getGenConfigAccess().getGroup_3_1(), "rule__GenConfig__Group_3_1__0");
					put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
					put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
					put(grammarAccess.getGeneratorAccess().getGroup_3_0(), "rule__Generator__Group_3_0__0");
					put(grammarAccess.getGeneratorAccess().getGroup_3_1(), "rule__Generator__Group_3_1__0");
					put(grammarAccess.getGeneratorAccess().getGroup_6(), "rule__Generator__Group_6__0");
					put(grammarAccess.getBundleAccess().getGroup(), "rule__Bundle__Group__0");
					put(grammarAccess.getMetamodelAccess().getGroup(), "rule__Metamodel__Group__0");
					put(grammarAccess.getClazzAccess().getGroup(), "rule__Clazz__Group__0");
					put(grammarAccess.getClazzAccess().getGroup_1(), "rule__Clazz__Group_1__0");
					put(grammarAccess.getClazzAccess().getGroup_2(), "rule__Clazz__Group_2__0");
					put(grammarAccess.getClazzAccess().getGroup_2_2(), "rule__Clazz__Group_2_2__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_1_0(), "rule__Property__Group_1_0__0");
					put(grammarAccess.getPropertyAccess().getGroup_1_1(), "rule__Property__Group_1_1__0");
					put(grammarAccess.getURIAccess().getGroup(), "rule__URI__Group__0");
					put(grammarAccess.getURIAccess().getGroup_1(), "rule__URI__Group_1__0");
					put(grammarAccess.getURIAccess().getGroup_3(), "rule__URI__Group_3__0");
					put(grammarAccess.getFRAGMENTAccess().getGroup(), "rule__FRAGMENT__Group__0");
					put(grammarAccess.getFRAGMENTAccess().getGroup_1(), "rule__FRAGMENT__Group_1__0");
					put(grammarAccess.getFRAGMENTAccess().getGroup_2(), "rule__FRAGMENT__Group_2__0");
					put(grammarAccess.getGenConfigAccess().getMetamodelAssignment_1(), "rule__GenConfig__MetamodelAssignment_1");
					put(grammarAccess.getGenConfigAccess().getGlobalDensityAssignment_3_0_2(), "rule__GenConfig__GlobalDensityAssignment_3_0_2");
					put(grammarAccess.getGenConfigAccess().getGlobalVariationAssignment_3_1_2(), "rule__GenConfig__GlobalVariationAssignment_3_1_2");
					put(grammarAccess.getGenConfigAccess().getGeneratorsAssignment_4(), "rule__GenConfig__GeneratorsAssignment_4");
					put(grammarAccess.getGenConfigAccess().getGeneratorsAssignment_5(), "rule__GenConfig__GeneratorsAssignment_5");
					put(grammarAccess.getGeneratorAccess().getNameAssignment_0(), "rule__Generator__NameAssignment_0");
					put(grammarAccess.getGeneratorAccess().getNumberAssignment_1(), "rule__Generator__NumberAssignment_1");
					put(grammarAccess.getGeneratorAccess().getSizeAssignment_3_0_1(), "rule__Generator__SizeAssignment_3_0_1");
					put(grammarAccess.getGeneratorAccess().getPrefixAssignment_3_1_1(), "rule__Generator__PrefixAssignment_3_1_1");
					put(grammarAccess.getGeneratorAccess().getClassesAssignment_5(), "rule__Generator__ClassesAssignment_5");
					put(grammarAccess.getGeneratorAccess().getClassesAssignment_6_1(), "rule__Generator__ClassesAssignment_6_1");
					put(grammarAccess.getBundleAccess().getSizeAssignment_0(), "rule__Bundle__SizeAssignment_0");
					put(grammarAccess.getBundleAccess().getTimesAssignment_2(), "rule__Bundle__TimesAssignment_2");
					put(grammarAccess.getMetamodelAccess().getNameAssignment_0(), "rule__Metamodel__NameAssignment_0");
					put(grammarAccess.getMetamodelAccess().getUriAssignment_1(), "rule__Metamodel__UriAssignment_1");
					put(grammarAccess.getClazzAccess().getNameAssignment_0(), "rule__Clazz__NameAssignment_0");
					put(grammarAccess.getClazzAccess().getInstancesAssignment_1_1(), "rule__Clazz__InstancesAssignment_1_1");
					put(grammarAccess.getClazzAccess().getPropertiesAssignment_2_1(), "rule__Clazz__PropertiesAssignment_2_1");
					put(grammarAccess.getClazzAccess().getPropertiesAssignment_2_2_1(), "rule__Clazz__PropertiesAssignment_2_2_1");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getPropertyAccess().getDensityAssignment_1_0_1(), "rule__Property__DensityAssignment_1_0_1");
					put(grammarAccess.getPropertyAccess().getVariationAssignment_1_1_1(), "rule__Property__VariationAssignment_1_1_1");
					put(grammarAccess.getURIAccess().getSchemeAssignment_0(), "rule__URI__SchemeAssignment_0");
					put(grammarAccess.getURIAccess().getAuthorityAssignment_1_0(), "rule__URI__AuthorityAssignment_1_0");
					put(grammarAccess.getURIAccess().getFragmentsAssignment_2(), "rule__URI__FragmentsAssignment_2");
					put(grammarAccess.getURIAccess().getFragmentsAssignment_3_1(), "rule__URI__FragmentsAssignment_3_1");
					put(grammarAccess.getGenConfigAccess().getUnorderedGroup_3(), "rule__GenConfig__UnorderedGroup_3");
					put(grammarAccess.getGeneratorAccess().getUnorderedGroup_3(), "rule__Generator__UnorderedGroup_3");
					put(grammarAccess.getPropertyAccess().getUnorderedGroup_1(), "rule__Property__UnorderedGroup_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDMGenParser typedParser = (InternalDMGenParser) parser;
			typedParser.entryRuleGenConfig();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DMGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DMGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
