/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.dmgen.ui.contentassist;

import com.google.common.collect.Iterables;
import fr.inria.diverse.dmgen.dMGen.Clazz;
import fr.inria.diverse.dmgen.dMGen.Metamodel;
import fr.inria.diverse.dmgen.dMGen.URI;
import fr.inria.diverse.dmgen.ui.contentassist.AbstractDMGenProposalProvider;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class DMGenProposalProvider extends AbstractDMGenProposalProvider {
  private Set<EPackage> importedPackages;
  
  @Override
  public void complete_Clazz(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Clazz(model, ruleCall, context, acceptor);
    Set<EPackage> __importedPackages = this._importedPackages(model);
    final Function1<EPackage, EList<EClassifier>> _function = (EPackage pck) -> {
      return pck.getEClassifiers();
    };
    Iterable<EList<EClassifier>> _map = IterableExtensions.<EPackage, EList<EClassifier>>map(__importedPackages, _function);
    Iterable<EClassifier> _flatten = Iterables.<EClassifier>concat(_map);
    final Function1<EClassifier, Boolean> _function_1 = (EClassifier c) -> {
      return Boolean.valueOf((c instanceof EClass));
    };
    Iterable<EClassifier> _filter = IterableExtensions.<EClassifier>filter(_flatten, _function_1);
    final Function1<EClassifier, String> _function_2 = (EClassifier c) -> {
      return c.getName();
    };
    Iterable<String> _map_1 = IterableExtensions.<EClassifier, String>map(_filter, _function_2);
    final Consumer<String> _function_3 = (String element) -> {
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(element, element, null, context);
      acceptor.accept(_createCompletionProposal);
    };
    _map_1.forEach(_function_3);
  }
  
  @Override
  public void complete_Property(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Property(model, ruleCall, context, acceptor);
    final Clazz myClazz = ((Clazz) model);
    Set<EPackage> __importedPackages = this._importedPackages(model);
    final Function1<EPackage, EList<EClassifier>> _function = (EPackage pck) -> {
      return pck.getEClassifiers();
    };
    Iterable<EList<EClassifier>> _map = IterableExtensions.<EPackage, EList<EClassifier>>map(__importedPackages, _function);
    Iterable<EClassifier> _flatten = Iterables.<EClassifier>concat(_map);
    final Function1<EClassifier, Boolean> _function_1 = (EClassifier eCls) -> {
      return Boolean.valueOf((eCls instanceof EClass));
    };
    Iterable<EClassifier> _filter = IterableExtensions.<EClassifier>filter(_flatten, _function_1);
    final Function1<EClassifier, Boolean> _function_2 = (EClassifier c) -> {
      String _name = c.getName();
      String _name_1 = myClazz.getName();
      return Boolean.valueOf(_name.equals(_name_1));
    };
    EClassifier _findFirst = IterableExtensions.<EClassifier>findFirst(_filter, _function_2);
    final EClass currentClass = ((EClass) _findFirst);
    EList<EReference> _eReferences = currentClass.getEReferences();
    final Function1<EReference, String> _function_3 = (EReference eRef) -> {
      return eRef.getName();
    };
    List<String> _map_1 = ListExtensions.<EReference, String>map(_eReferences, _function_3);
    final Consumer<String> _function_4 = (String name) -> {
      ICompletionProposal _createCompletionProposal = this.createCompletionProposal(name, name, null, context);
      acceptor.accept(_createCompletionProposal);
    };
    _map_1.forEach(_function_4);
  }
  
  public Set<EPackage> _importedPackages(final EObject model) {
    Resource resource = model.eResource();
    HashSet<EPackage> _hashSet = new HashSet<EPackage>();
    this.importedPackages = _hashSet;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    final Function1<EObject, Boolean> _function = (EObject e) -> {
      return Boolean.valueOf((e instanceof Metamodel));
    };
    Iterator<EObject> _filter = IteratorExtensions.<EObject>filter(_allContents, _function);
    final Function1<EObject, Metamodel> _function_1 = (EObject e) -> {
      return ((Metamodel) e);
    };
    Iterator<Metamodel> _map = IteratorExtensions.<EObject, Metamodel>map(_filter, _function_1);
    final Function1<Metamodel, URI> _function_2 = (Metamodel m) -> {
      return m.getUri();
    };
    Iterator<URI> _map_1 = IteratorExtensions.<Metamodel, URI>map(_map, _function_2);
    final Procedure1<URI> _function_3 = (URI uri) -> {
      List<EPackage> _loadAllpackagesOfURI = this.loadAllpackagesOfURI(uri);
      this.importedPackages.addAll(_loadAllpackagesOfURI);
    };
    IteratorExtensions.<URI>forEach(_map_1, _function_3);
    return this.importedPackages;
  }
  
  public List<EPackage> loadAllpackagesOfURI(final URI uri) {
    final ResourceSetImpl resourceSet = new ResourceSetImpl();
    Resource.Factory.Registry _resourceFactoryRegistry = resourceSet.getResourceFactoryRegistry();
    Map<String, Object> _extensionToFactoryMap = _resourceFactoryRegistry.getExtensionToFactoryMap();
    EcoreResourceFactoryImpl _ecoreResourceFactoryImpl = new EcoreResourceFactoryImpl();
    _extensionToFactoryMap.put(
      EcorePackage.eNS_PREFIX, _ecoreResourceFactoryImpl);
    String _prettyString = this.toPrettyString(uri);
    org.eclipse.emf.common.util.URI _createURI = org.eclipse.emf.common.util.URI.createURI(_prettyString);
    final Resource resource = resourceSet.getResource(_createURI, true);
    TreeIterator<EObject> _allContents = resource.getAllContents();
    final Function1<EObject, Boolean> _function = (EObject e) -> {
      return Boolean.valueOf((e instanceof EPackage));
    };
    Iterator<EObject> _filter = IteratorExtensions.<EObject>filter(_allContents, _function);
    final Function1<EObject, EPackage> _function_1 = (EObject pck) -> {
      return ((EPackage) pck);
    };
    Iterator<EPackage> _map = IteratorExtensions.<EObject, EPackage>map(_filter, _function_1);
    return IteratorExtensions.<EPackage>toList(_map);
  }
  
  public String toPrettyString(final URI uri) {
    StringBuffer buff = new StringBuffer();
    String _scheme = uri.getScheme();
    buff.append(_scheme);
    String _authority = uri.getAuthority();
    boolean _isEmpty = _authority.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      String _authority_1 = uri.getAuthority();
      buff.append(_authority_1);
      buff.append("/");
    }
    EList<String> _fragments = uri.getFragments();
    for (final String s : _fragments) {
      {
        buff.append(s);
        buff.append("/");
      }
    }
    String result = buff.toString();
    int _length = result.length();
    int _minus = (_length - 1);
    return result.substring(0, _minus);
  }
}
